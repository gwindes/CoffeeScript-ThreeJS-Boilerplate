// Generated by CoffeeScript 1.6.3
(function() {
  var MouseListener,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  MouseListener = (function() {
    function MouseListener(parent, renderer) {
      this.parent = parent;
      this.renderer = renderer;
      this.onMouseMove = __bind(this.onMouseMove, this);
      this.onMouseUp = __bind(this.onMouseUp, this);
      this.onMouseDown = __bind(this.onMouseDown, this);
      this.addEventListener("mousedown");
      this.addEventListener("mouseup");
      this.addEventListener("touchstart");
      this.onMouseDownPosition = new THREE.Vector2();
      this.onMouseMovePosition = new THREE.Vector2();
      this.onMouseUpPosition = new THREE.Vector2();
      this.projector = new THREE.Projector();
      this.ray = new THREE.Raycaster();
      this.offset = new THREE.Vector3();
      this.selected = this.parent.camera;
      return this;
    }

    MouseListener.prototype.addEventListener = function(type) {
      var obj;
      obj = this.renderer.domElement;
      switch (type) {
        case 'mousedown':
          return obj.addEventListener("mousedown", this.onMouseDown, false);
        case 'mouseup':
          return obj.addEventListener("mouseup", this.onMouseUp, false);
        case 'mousemove':
          return obj.addEventListener("mousemove", this.onMouseMove, false);
        case 'touchstart':
          return obj.addEventListener("touchstart", this.onMouseDown, false);
        case 'touchmove':
          return obj.addEventListener("touchmove", this.onMouseMove, false);
        case 'touchend':
          return obj.addEventListener("touchend", this.onMouseUp, false);
      }
    };

    MouseListener.prototype.removeEventListener = function(type) {
      var obj;
      obj = this.renderer.domElement;
      switch (type) {
        case 'mousedown':
          return obj.removeEventListener("mousedown", this.onMouseDown, false);
        case 'mouseup':
          return obj.removeEventListener("mouseup", this.onMouseUp, false);
        case 'mousemove':
          return obj.removeEventListener("mousemove", this.onMouseMove, false);
      }
    };

    MouseListener.prototype.getIntersects = function(event, object) {
      var intersects, vector;
      vector = new THREE.Vector3((event.layerX / this.renderer.domElement.offsetWidth) * 2 - 1, -(event.layerY / this.renderer.domElement.offsetHeight) * 2 + 1, 0.5);
      this.projector.unprojectVector(vector, this.parent.camera);
      this.ray.set(this.parent.camera.position, vector.sub(this.parent.camera.position).normalize());
      if (object instanceof Array) {
        intersects = this.ray.intersectObjects(object, true);
        console.log("intersects.length = " + intersects.length);
        if (intersects.length > 0) {
          console.log("Picked object = " + intersects[0].object.name);
          return this.ray.intersectObjects(object, true);
        }
      }
      return this.ray.intersectObjects(object, true);
    };

    MouseListener.prototype.onMouseDown = function(event) {
      console.log("Mouse Down: x = " + event.layerX + " \t y = " + event.layerY);
      console.log("event = " + event + " \t button = " + event.button);
      event.preventDefault();
      this.addEventListener("mouseup");
      this.renderer.domElement.focus();
      return this.onMouseDownPosition.set(event.layerX, event.layerY);
    };

    MouseListener.prototype.onMouseUp = function(event) {
      var intersects, selected;
      removeEventListener("mousemove");
      this.onMouseUpPosition.set(event.layerX, event.layerY);
      console.log("Mouse Up: x = " + event.layerX + " \t y = " + event.layerY);
      if (this.onMouseDownPosition.distanceTo(this.onMouseUpPosition) < 1) {
        console.log("@ = " + (this.getName()));
        console.log("parent = " + (this.parent.getName()));
        intersects = this.getIntersects(event, this.parent.objects);
        if (intersects.length > 0) {
          selected = intersects[0].object;
          signals.objectSelected.dispatch(selected);
          console.log("selected.name = " + selected.name);
          console.log("selected.parent = " + selected.parent.name);
        } else {
          this.parent.enableCameraControls();
          selected = this.parent.camera;
          signals.objectSelected.dispatch(selected);
        }
        return this.parent.render();
      }
    };

    MouseListener.prototype.onMouseMove = function(event) {
      return console.log("Mouse Moved: x = " + event.layerX + " \t y = " + event.layerY);
    };

    return MouseListener;

  })();

  window.MouseListener = MouseListener;

}).call(this);

/*
//@ sourceMappingURL=MouseListener.map
*/
